{"version":3,"sources":["components/AddCategory.tsx","helpers/getGifs.ts","components/GifGridItem.tsx","components/GifGrid.tsx","hooks/useFetchGifs.ts","GifExpertApp.tsx","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","style","display","flexDirection","flexWrap","GifExpertApp","defaultCategories","categories","item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NA6BeA,EAvBK,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,cAAsC,EACvBC,mBAAS,IADc,mBACpDC,EADoD,KACxCC,EADwC,KAgB3D,OACE,sBAAMC,SAVY,SAACC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCRdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACL,mCAEVC,EAHe,iDAGiCC,UACpDH,GAJmB,6BACL,oCADK,SAOFI,MAAMF,GAPJ,cAOfG,EAPe,gBASEA,EAAKC,OATP,uBASbC,EATa,EASbA,KAEFC,EAAgBD,EAAKE,KAAI,SAACC,GAAc,IAAD,EAC3C,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAfjB,kBAmBdM,GAnBc,4CAAH,sDCOLO,EAPsB,SAAC,GAAD,IAAGb,EAAH,EAAGA,IAAKU,EAAR,EAAQA,MAAR,OACnC,sBAAKI,UAAU,0CAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,mBAAGI,UAAU,cAAb,SAA4BJ,QCInBO,EAAU,SAAC,GAAyB,IAAvBnB,EAAsB,EAAtBA,SAAsB,ECApB,SAACA,GAAsB,IAAD,EACtBd,mBAAkB,CAC1CqB,KAAM,GACNa,SAAS,IAHqC,mBACzCC,EADyC,KAClCC,EADkC,KAehD,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,UAKRC,EDd2BK,CAAa1B,GAAjCa,EADgC,EACtCN,KAAca,EADwB,EACxBA,QAEtB,OACE,qCACE,6BAAKpB,IACL,qBACE2B,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOC,SAAU,QAC1Dd,UAAU,qCAFZ,SAIGI,EACC,mBAAGJ,UAAU,iBAAb,wBAEAH,EAAOJ,KAAI,SAACC,GACV,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEC1BoB,EAhBuB,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,IAChC9C,mBAAmB8C,GADa,mBAC7DC,EAD6D,KACjDhD,EADiD,KAGpE,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAECgD,EAAWxB,KAAI,SAACyB,GAAD,OACd,cAAC,EAAD,CAAoBlC,SAAUkC,GAAhBA,UCZtBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.901016a2.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction, useState } from \"react\";\n\nexport interface AddCategoryProps {\n  setCategories: Dispatch<SetStateAction<string[]>>;\n}\n\nconst AddCategory = ({ setCategories }: AddCategoryProps) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const hanleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={hanleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nexport default AddCategory;\n","import { image } from \"../types/image\";\n\nexport const getGifs = async (category: string) => {\n  const api_key = \"4jJ6cwpTRWSoL4ec2gbkyWh9sGM6M7Ce\";\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=12&api_key=${api_key}`;\n\n  const resp = await fetch(url);\n\n  const { data } = await resp.json();\n\n  const gifs: image[] = data.map((img: any) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import { image } from \"../types/image\";\n\nconst GifGridItem: React.FC<image> = ({ url, title }) => (\n  <div className=\"card animate__animated animated__fadein\">\n    <img src={url} alt={title} />\n    <p className=\"title-image\">{title}</p>\n  </div>\n);\n\nexport default GifGridItem;\n","import PropTypes from \"prop-types\";\n\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nexport interface Props {\n  category: string;\n}\n\nexport const GifGrid = ({ category }: Props) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      <div\n        style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\" }}\n        className=\"animate__animated animated__fadein\"\n      >\n        {loading ? (\n          <p className=\"animate__flash\">Loading...</p>\n        ) : (\n          images.map((img) => {\n            return <GifGridItem key={img.id} {...img} />;\n          })\n        )}\n      </div>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\nimport { image } from \"../types/image\";\n\ninterface myState {\n  data: image[];\n  loading: boolean;\n}\n\nexport const useFetchGifs = (category: string) => {\n  const [state, setState] = useState<myState>({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  });\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\ninterface Props {\n  defaultCategories?: string[];\n}\n\nconst GifExpertApp: React.FC<Props> = ({ defaultCategories = [] }) => {\n  const [categories, setCategories] = useState<string[]>(defaultCategories);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      {categories.map((item) => (\n        <GifGrid key={item} category={item} />\n      ))}\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}